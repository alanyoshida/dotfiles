#!/bin/bash
#set -o xtrace

h1(){
  echo -e "\n\e[32m${F_VDOBLE}\e[1m# $1\e[39m\n"
}

err(){
  echo -e "\n\e[31mError: $1\e[39m"
}

bold(){
  echo -en "\e[1m$1\e[21m"
}

h1 "Update"
sudo apt-get update

h1 "Install Docker"
# DOCKER
sudo apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
sudo apt-get install -y docker-ce docker-ce-cli containerd.io
sudo docker run hello-world

h1 "install docker-compose"
sudo curl -L "https://github.com/docker/compose/releases/download/1.25.4/docker-compose-"(uname -s)"-"(uname -m) -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose

h1 "install microk8s"
sudo snap install microk8s --classic
sudo microk8s.enable dns
sudo microk8s.enable registry

h1 "Configuring microk8s"
sudo microk8s.kubectl config view --flatten > ~/.kube/microk8s-config
set KUBECONFIG "~/.kube/microk8s-config:~/.kube/config"
kubectl config view --flatten > ~/.kube/temp-config
mv ~/.kube/temp-config ~/.kube/config
kubectl config use-context microk8s

h1 "install tilt.dev"
curl -fsSL https://raw.githubusercontent.com/windmilleng/tilt/master/scripts/install.sh | bash

# test tilt
tilt version

# Kubectx - Change k8s context
sudo git clone https://github.com/ahmetb/kubectx /opt/kubectx
sudo ln -s /opt/kubectx/kubectx /usr/local/bin/kubectx
sudo ln -s /opt/kubectx/kubens /usr/local/bin/kubens

# Fish completions
mkdir -p ~/.config/fish/completions
ln -s /opt/kubectx/completion/kubectx.fish ~/.config/fish/completions/
ln -s /opt/kubectx/completion/kubens.fish ~/.config/fish/completions/

# Snaps
h1 "install Vscode"
sudo snap install --classic code

h1 "install postman"
sudo snap install postman

h1 "install kubectl"
sudo snap install --classic kubectl

h1 "install gitkraken"
sudo snap install gitkraken

h1 "install intellij"
sudo snap install --classic intellij-idea-ultimate

h1 "install go"
sudo snap install --classic go

h1 "install dbeaver"
sudo snap install dbeaver-ce

h1 "install terraform"
sudo snap install terraform

h1 "install spotify"
sudo snap install spotify

h1 "install build-essential git"
sudo apt install -y git build-essential manpages-dev

h1 "Install Rust"
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

h1 "Install NVM (node version manager)"
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
nvm install v12

h1 "Install chromium"
sudo apt install -y chromium-browser

h1 "powerline"
sudo apt install powerline

h1 "install tmux"
sudo apt install -y tmux

h1 "install tmux plugin manager"
git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

h1 "install fish"
sudo apt install -y fish fish-common

#powerline-config tmux setup
#powerline-config fish setup
h1 "install xdotool (libinput gestures)"
sudo gpasswd -a $USER input
sudo apt install -y xdotool libinput-tools
git clone https://github.com/bulletmark/libinput-gestures.git
cd libinput-gestures
sudo ./libinput-gestures-setup install
cp old/libinput-gestures.conf ~/.conf/
./libinput-gestures-setup autostart
./libinput-gestures-setup start
cd --

# config file ~/.config/libinput-gestures.conf

h1 "install charles proxy"
sudo apt-key adv --keyserver pgp.mit.edu --recv-keys 1AD28806
sudo sh -c 'echo deb https://www.charlesproxy.com/packages/apt/ charles-proxy main > /etc/apt/sources.list.d/charles.list'
sudo apt-get update
sudo apt-get install charles-proxy

h1 "install miscelaneous"
sudo apt install -y fish git vim stow tmux pip gawk mawk jq moreutils:sponge  man-db:apropos gcc fzf hub htop unzip gnupg:gpg gimp

h1 "Install OBS studio"
sudo apt-get install ffmpeg
sudo add-apt-repository ppa:obsproject/obs-studio
sudo apt install obs-studio

h1 "Install flatpak"
sudo apt install flatpak

bold "Install Nvidia? (y/n): "
read nvidia
if [ "$nvidia" != "${nvidia#[Yy]}" ] ;then
  echo "Installing Nvidia drivers ..."
  sudo add-apt-repository ppa:graphics-drivers/ppa
  sudo dpkg --add-architecture i386
  sudo apt update
  #sudo apt install nvidia-driver-440 libnvidia-gl-440 libnvidia-gl-440:i386
  sudo apt install libvulkan1 libvulkan1:i386
  echo "Nvidia drivers Installed"
fi

bold "Ubuntu 19.10+ ? (y/n)"
read ubuntu19
if [ "$ubuntu19" != "${ubuntu19#[Yy]}" ] ;then
  echo "Installing Vulkan"
  sudo dpkg --add-architecture i386
  sudo apt update
  sudo apt install libgl1-mesa-dri:i386
  sudo apt install mesa-vulkan-drivers mesa-vulkan-drivers:i386
  echo "Vulkan end"
fi

bold "Ubuntu 18.04 ? (y/n)"
read ubuntu18
if [ "$ubuntu18" != "${ubuntu18#[Yy]}" ] ;then
  echo "Installing Vulkan using ppa:kisak/kisak-mesa"
  sudo add-apt-repository ppa:kisak/kisak-mesa
  sudo dpkg --add-architecture i386
  sudo apt update
  sudo apt upgrade
  sudo apt install libgl1-mesa-glx:i386 libgl1-mesa-dri:i386
  sudo apt install mesa-vulkan-drivers mesa-vulkan-drivers:i386
  echo "Vulkan end"
fi

bold "Install Lutris ? (y/n)"
read lutris
if [ "$lutris" != "${lutris#[Yy]}" ] ;then
  echo "Installing Lutris ..."
  sudo add-apt-repository ppa:lutris-team/lutris
  sudo apt-get update
  sudo apt-get install lutris
  echo "lutris end"
fi


