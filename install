#!/bin/bash
#set -o xtrace

h1(){
  echo -e "\n\e[32m${F_VDOBLE}\e[1m# $1\e[39m\n"
}

err(){
  echo -e "\n\e[31mError: $1\e[39m"
}

bold(){
  echo -en "\e[1m$1\e[21m"
}

h1 "Update"
sudo apt-get update

h1 "install build-essential git"
sudo apt install -y git build-essential manpages-dev

h1 "install miscelaneous"
sudo apt install -y git vim stow tmux pip gawk mawk jq moreutils:sponge  man-db:apropos gcc fzf hub htop unzip gnupg:gpg gimp

h1 "install ripgrep (grep alternative)"
sudo apt install -y ripgrep

h1 "install fd (find alternative)"
sudo apt install -y fd-find

h1 "install ncdu (disk usage)"
sudo apt install ncdu

h1 "install bashtop (cpu usage)"
sudo add-apt-repository ppa:bashtop-monitor/bashtop
sudo apt update
sudo apt install -y bashtop

h1 "install ranger (file manager)"
pip install ranger-fm

h1 "Install Docker"
# DOCKER
sudo apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
sudo apt-get install -y docker-ce docker-ce-cli containerd.io
sudo docker run hello-world

h1 "install docker-compose"
sudo curl -L "https://github.com/docker/compose/releases/download/1.25.4/docker-compose-"$(uname -s)"-"$(uname -m) -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose

h1 "install microk8s"
sudo snap install microk8s --classic
sudo microk8s.enable dns
sudo microk8s.enable registry

h1 "configuring microk8s"
sudo microk8s.kubectl config view --flatten > ~/.kube/microk8s-config
set KUBECONFIG "~/.kube/microk8s-config:~/.kube/config"
kubectl config view --flatten > ~/.kube/temp-config
mv ~/.kube/temp-config ~/.kube/config
kubectl config use-context microk8s

h1 "install tilt.dev"
curl -fsSL https://raw.githubusercontent.com/windmilleng/tilt/master/scripts/install.sh | bash

# test tilt
tilt version

# Kubectx - Change k8s context
sudo git clone https://github.com/ahmetb/kubectx /opt/kubectx
sudo ln -s /opt/kubectx/kubectx /usr/local/bin/kubectx
sudo ln -s /opt/kubectx/kubens /usr/local/bin/kubens

# Fish completions
mkdir -p ~/.config/fish/completions
ln -s /opt/kubectx/completion/kubectx.fish ~/.config/fish/completions/
ln -s /opt/kubectx/completion/kubens.fish ~/.config/fish/completions/

h1 "install flatpak"
sudo add-apt-repository ppa:flatpak/stable
sudo apt update
sudo apt install -y flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

# Snaps
h1 "install vscode"
# sudo snap install --classic code
sudo flatpak install -y flathub com.visualstudio.code

h1 "install postman"
# sudo snap install postman
sudo flatpak install -y flathub com.getpostman.Postman

h1 "install kubectl"
sudo snap install --classic kubectl

h1 "install kubectl krew"
(
  set -x; cd "$(mktemp -d)" &&
  OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
  ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
  KREW="krew-${OS}_${ARCH}" &&
  curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
  tar zxvf "${KREW}.tar.gz" &&
  ./"${KREW}" install krew
)
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
echo 'export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
' >> ~/.bashrc
kubectl krew install neat
kubectl krew install sniff
kubectl krew install spy
kubectl krew install tail
kubectl krew install view-webhook

h1 "install stern (multiple pod logs)"
curl -L https://github.com/wercker/stern/releases/download/1.11.0/stern_linux_amd64 -o stern
sudo chmod +x stern
sudo mv stern /usr/local/bin

h1 "install helm"
curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
sudo chmod 700 get_helm.sh
sudo ./get_helm.sh

h1 "install helm-docs"
go install github.com/norwoodj/helm-docs/cmd/helm-docs@latest

h1 "install terraform"
sudo snap install --candidate terraform

h1 "install terragrunt"
curl -L https://github.com/gruntwork-io/terragrunt/releases/download/v0.36.6/terragrunt_linux_amd64 -o terragrunt
sudo chmod +x terragrunt
sudo mv terragrunt /usr/local/bin

h1 "install lazygit"
sudo add-apt-repository ppa:lazygit-team/release
sudo apt-get update
sudo apt-get install -y lazygit

h1 "install k9s"
curl -L https://github.com/derailed/k9s/releases/download/v0.25.18/k9s_Linux_x86_64.tar.gz -o k9s.tar.gz
sudo tar -C /usr/local/bin -xzf k9s.tar.gz

h1 "install jq"
sudo curl -L https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -o /usr/local/bin/jq
sudo chmod +x /usr/local/bin/jq

h1 "install yh"
sudo curl -L https://github.com/andreazorzetto/yh/releases/download/v0.4.0/yh-linux-amd64.zip -o ~/Downloads/yh.zip
sudo unzip ~/Downloads/yh.zip 
sudo mv yh /usr/local/bin/yh
sudo chmod +x /usr/local/bin/yh

#h1 "install gitkraken"
#sudo snap install gitkraken

#h1 "install intellij"
#sudo snap install --classic intellij-idea-ultimate

h1 "Install Rust"
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

h1 "install exa (ls alternative)"
cargo install exa

h1 "install golang"
#sudo snap install --classic go
curl -L https://go.dev/dl/go1.18.linux-amd64.tar.gz -o golang.tar.gz
sudo tar -C /usr/local -xzf golang.tar.gz
# for bash
export PATH=$PATH:/usr/local/go/bin
sudo echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
# for fish shell
set -gx PATH $PATH /usr/local/go/bin
sudo echo 'set -gx PATH $PATH /usr/local/go/bin' >> ~/.config/fish/config.fish
go version

h1 "install kind"
go install sigs.k8s.io/kind@v0.12.0
kind

h1 "install dbeaver"
# sudo snap install dbeaver-ce
sudo flatpak install -y flathub io.dbeaver.DBeaverCommunity

h1 "install spotify"
# sudo snap install spotify
sudo flatpak install -y flathub com.spotify.Client

h1 "Install NVM (node version manager)"
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
nvm install v12

# h1 "Install chromium"
# sudo apt install -y chromium-browser

h1 "powerline"
sudo apt install -y powerline
pip install powerline-status
pip install powerline-kubernetes
#powerline-config tmux setup
#powerline-config fish setup

h1 "install tmux"
sudo apt install -y tmux

h1 "install tmux plugin manager"
git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

h1 "install tmate (share terminal via SSH)"
sudo apt-get install -y tmate

h1 "install kitty (terminal emulator)"
curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin
sudo ln -s ~/.local/kitty.app/bin/kitty ~/.local/bin/
sudo cp ~/.local/kitty.app/share/applications/kitty.desktop ~/.local/share/applications/
sudo sed -i "s|Icon=kitty|Icon=/home/$USER/.local/kitty.app/share/icons/hicolor/256x256/apps/kitty.png|g" ~/.local/share/applications/kitty*.desktop

h1 "install fish (Friendly Interative SHell)"
sudo apt install -y fish fish-common
cat <<EOF >> ~/.config/fish/config.fish
set GOPATH $HOME/go
set -x SHELL /bin/bash
set -gx PATH $PATH $HOME/.krew/bin
EOF

h1 "install xdotool (libinput gestures)"
sudo gpasswd -a $USER input
sudo apt install -y xdotool libinput-tools
git clone https://github.com/bulletmark/libinput-gestures.git
cd libinput-gestures
sudo ./libinput-gestures-setup install
cp old/libinput-gestures.conf ~/.conf/
./libinput-gestures-setup autostart
./libinput-gestures-setup start
cd --

# config file ~/.config/libinput-gestures.conf
h1 "install ngrok ("
curl -L https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.tgz -o ~/Downloads/ngrok-stable-linux-amd64.tgz
sudo tar xvzf ~/Downloads/ngrok-stable-linux-amd64.tgz -C /usr/local/bin

h1 "install charles proxy"
sudo apt-key adv --keyserver pgp.mit.edu --recv-keys 1AD28806
sudo sh -c 'echo deb https://www.charlesproxy.com/packages/apt/ charles-proxy main > /etc/apt/sources.list.d/charles.list'
sudo apt-get update
sudo apt-get install charles-proxy

h1 "install vim vundle (plugin manager)"
git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
vim +PluginInstall +qall

h1 "install OBS studio"
sudo apt install -y ffmpeg
sudo add-apt-repository ppa:obsproject/obs-studio
sudo apt install -y obs-studio

bold "install Nvidia Driver? (y/n): "
read nvidia
if [ "$nvidia" != "${nvidia#[Yy]}" ] ;then
  echo "Installing Nvidia drivers ..."
  sudo add-apt-repository ppa:graphics-drivers/ppa
  sudo dpkg --add-architecture i386
  sudo apt update
  #sudo apt install nvidia-driver-440 libnvidia-gl-440 libnvidia-gl-440:i386
  sudo apt install libvulkan1 libvulkan1:i386
  echo "Nvidia drivers Installed"
fi

bold "install vulkan ? Ubuntu 19.10+ ? (y/n)"
read ubuntu19
if [ "$ubuntu19" != "${ubuntu19#[Yy]}" ] ;then
  echo "Installing Vulkan"
  sudo dpkg --add-architecture i386
  sudo apt update
  sudo apt install libgl1-mesa-dri:i386
  sudo apt install mesa-vulkan-drivers mesa-vulkan-drivers:i386
  echo "Vulkan end"
fi

bold "install vulkan ? Ubuntu 18.04 ? (y/n)"
read ubuntu18
if [ "$ubuntu18" != "${ubuntu18#[Yy]}" ] ;then
  echo "Installing Vulkan using ppa:kisak/kisak-mesa"
  sudo add-apt-repository ppa:kisak/kisak-mesa
  sudo dpkg --add-architecture i386
  sudo apt update
  sudo apt upgrade
  sudo apt install libgl1-mesa-glx:i386 libgl1-mesa-dri:i386
  sudo apt install mesa-vulkan-drivers mesa-vulkan-drivers:i386
  echo "Vulkan end"
fi

bold "Install Lutris ? (y/n)"
read lutris
if [ "$lutris" != "${lutris#[Yy]}" ] ;then
  echo "Installing Lutris ..."
  sudo add-apt-repository ppa:lutris-team/lutris
  sudo apt-get update
  sudo apt-get install lutris
  echo "lutris end"
fi


